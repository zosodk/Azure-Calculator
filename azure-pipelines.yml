# Azure Pipelines
# Build and deploy a full-stack calculator application with Angular frontend and .NET backend APIs.

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  nodeVersion: '18.x'
  dotnetVersion: '9.0.x'
  frontendWorkingDirectory: './frontend'
  basicApiProject: './BasicCalculatorApi/BasicCalculatorApi.csproj'
  advancedApiProject: './AdvancedCalculatorApi/AdvancedCalculatorApi.csproj'
  publishOutputBasic: './publish/basic'
  publishOutputAdvanced: './publish/advanced'
  ANGULAR_APP_NAME: 'calculator-frontend' # Replace with your Angular app name

steps:
- checkout: self
  fetchDepth: 0

- task: NodeTool@0
  displayName: 'Setup Node.js ($(nodeVersion))'
  inputs:
    versionSpec: '$(nodeVersion)'

- task: Npm@1
  displayName: 'Install Frontend Dependencies and Build'
  inputs:
    workingDir: '$(frontendWorkingDirectory)'
    command: 'custom'
    customCommand: 'install -g @angular/cli && npm install && ng build --configuration production'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(frontendWorkingDirectory)/dist/$(ANGULAR_APP_NAME)' # Adjust path if needed
    ArtifactName: 'frontend-build'
    publishLocation: 'Container'

- task: DotNetCoreCLI@2
  displayName: 'Setup .NET Core SDK ($(dotnetVersion))'
  inputs:
    version: '$(dotnetVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Restore Backend Dependencies (Basic API)'
  inputs:
    command: 'restore'
    projects: '$(basicApiProject)'

- task: DotNetCoreCLI@2
  displayName: 'Restore Backend Dependencies (Advanced API)'
  inputs:
    command: 'restore'
    projects: '$(advancedApiProject)'

- task: DotNetCoreCLI@2
  displayName: 'Build Backend APIs'
  inputs:
    command: 'build'
    projects: '$(basicApiProject);$(advancedApiProject)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Publish Backend APIs (Basic API)'
  inputs:
    command: 'publish'
    projects: '$(basicApiProject)'
    arguments: '--configuration $(buildConfiguration) --output $(publishOutputBasic)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(publishOutputBasic)'
    ArtifactName: 'backend-basic-build'
    publishLocation: 'Container'

- task: DotNetCoreCLI@2
  displayName: 'Publish Backend APIs (Advanced API)'
  inputs:
    command: 'publish'
    projects: '$(advancedApiProject)'
    arguments: '--configuration $(buildConfiguration) --output $(publishOutputAdvanced)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(publishOutputAdvanced)'
    ArtifactName: 'backend-advanced-build'
    publishLocation: 'Container'

# Deployment to Azure Static Web Apps (Frontend) - Uncomment when parallelism is granted
# - task: AzureStaticWebApp@0
#   inputs:
#     azure_static_web_apps_api_token: '$(STATIC_WEB_APP_API_TOKEN)'
#     app_location: '$(frontendWorkingDirectory)'
#     output_location: '$(frontendWorkingDirectory)/dist/$(ANGULAR_APP_NAME)'
#     api_location: 'api' # Adjust if you have a Functions backend
#     deployment_environment: 'production'
#   displayName: 'Deploy Angular Frontend to Azure Static Web Apps'

# Deployment to Azure App Service (Backend Basic API) - Uncomment when parallelism is granted
# - task: AzureWebApp@1
#   displayName: 'Deploy BasicCalculatorApi to Azure App Service'
#   inputs:
#     azureSubscription: 'AzureSubscription_comp2_dsl'
#     appName: '$(AZURE_BASIC_API_APP_NAME)'
#     package: '$(publishOutputBasic)'
#     appSettings: |
#       ConnectionStrings__DbConnection: $(PG_CONN)

# Deployment to Azure App Service (Backend Advanced API) - Uncomment when parallelism is granted
# - task: AzureWebApp@1
#   displayName: 'Deploy AdvancedCalculatorApi to Azure App Service'
#   inputs:
#     azureSubscription: 'AzureSubscription_comp2_dsl'
#     appName: '$(AZURE_ADVANCED_API_APP_NAME)'
#     package: '$(publishOutputAdvanced)'
#     appSettings: |
#       ConnectionStrings__DbConnection: $(PG_CONN)